data$Diagnosis <- data$Diagnosis / 2 - 1 #normalize diagnosis label (0 = benign, 1 = malignant)
data <- data[!(data$`Bare Nuclei` == "?"),] #drop patients with missing observations
data$`Bare Nuclei` <- as.numeric(data$`Bare Nuclei`) #make all entries numeric
append <- data
data <- rbind(data, append)
##load and clean up data
rep <- 3
data <- read.csv("Datasets/breast-cancer-wisconsin.data", header = FALSE) #load dataset
colnames(data) <- c("ID", "Clump Thickness", "Uniformity of Cell Size",
"Uniformity of Cell Shape", "Marginal Adhesion",
"Single Epithelial Cell Size", "Bare Nuclei",
"Bland Chromatin", "Normal Nucleoli", "Mitoses",
"Diagnosis") #add descriptors
data$Diagnosis <- data$Diagnosis / 2 - 1 #normalize diagnosis label (0 = benign, 1 = malignant)
data <- data[!(data$`Bare Nuclei` == "?"),] #drop patients with missing observations
data$`Bare Nuclei` <- as.numeric(data$`Bare Nuclei`) #make all entries numeric
if(rep > 1){
append <- data
for(i in 2:rep){
data <- rbind(data, append)
}
}
N <- length(data$Diagnosis)
##simulate 3 imperfect annotators
alpha <- c(0.99, 0.97, 0.95) #specificity Annotated.csv
beta <- c(0.95, 0.9, 0.65) #sensitivity Annotated.csv
Diagnosis1 <- numeric(length = N)
Diagnosis2 <- numeric(length = N)
Diagnosis3 <- numeric(length = N)
for(i in 1:length(data$Diagnosis)){
if(data$Diagnosis[i] == 1){
Diagnosis1[i] <- rbinom(1,1,alpha[1])
Diagnosis2[i] <- rbinom(1,1,alpha[2])
Diagnosis3[i] <- rbinom(1,1,alpha[3])
} else {
Diagnosis1[i] <- 1-rbinom(1,1,beta[1])
Diagnosis2[i] <- 1-rbinom(1,1,beta[2])
Diagnosis3[i] <- 1-rbinom(1,1,beta[3])
}
}
for(i in 1:N){
if(data$Diagnosis[i] == 1){
Diagnosis1[i] <- rbinom(1,1,alpha[1])
Diagnosis2[i] <- rbinom(1,1,alpha[2])
Diagnosis3[i] <- rbinom(1,1,alpha[3])
} else {
Diagnosis1[i] <- 1-rbinom(1,1,beta[1])
Diagnosis2[i] <- 1-rbinom(1,1,beta[2])
Diagnosis3[i] <- 1-rbinom(1,1,beta[3])
}
}
#add to data
data$Diagnosis1 <- Diagnosis1
data$Diagnosis2 <- Diagnosis2
data$Diagnosis3 <- Diagnosis3
#create CSV file with simulated annotations
write.csv(data, "Datasets/BreastCancerWisconsinAnnotated03rep3.csv")
#load auxiliary functions
source("raykar_binary_classification_functions.r")
#load data, we work with R = 3 simulated erroneous annotators
data <- read.csv("Datasets/BreastCancerWisconsinAnnotated03rep3.csv")[,-1]
N <- length(data$Diagnosis)
R <- 3
#get matrix of annotators (Ann) & predictors (X)
Ann <- as.matrix(t(cbind(data$Diagnosis1,data$Diagnosis2,data$Diagnosis3)))
X <- data[, -c(1,11,12,13,14)] #remove response variables
X <- as.matrix(X)
colnames(X) <- NULL
#initialize mu with majority vote (as commented on page 1303)
mu <- colSums(Ann) / R
#initialize sensitivities (alpha), specificities (beta) for annotators, weight vector (w) as on page 1303
alpha <- as.vector(Ann %*% mu / sum(mu))
beta <- as.vector((1 - Ann) %*% (1 - mu) / sum(1 - mu))
w <- NR_algorithm(w_init = numeric(length = length(X[1,])), mu, X, gradient, hessian)$root
theta <- c(alpha, beta, w)
#set tolerance, max_iter and counter
tol <- 10^-6
max_iter <- 100
iter <- 1
#EM-algorithm loop
mu_new <- as.vector(a(alpha, Ann) * p(w, X) / (a(alpha, Ann) * p(w, X) + b(beta, Ann) *  (1 - p(w, X))))
alpha_new <- as.vector(Ann %*% mu_new / sum(mu_new))
beta_new <- as.vector((1 - Ann) %*% (1 - mu_new) / sum(1 - mu_new))
w_new <- NR_algorithm(w_init = w, mu_new, X, gradient, hessian)$root
theta_new <- c(alpha_new, beta_new, w_new)
while(sqrt(sum((theta_new - theta)^2)) > tol & iter <= max_iter){
alpha <- alpha_new
beta <- beta_new
w <- w_new
theta <- theta_new
mu_new <- as.vector(a(alpha, Ann) * p(w, X) / (a(alpha, Ann) * p(w, X) + b(beta, Ann) *  (1 - p(w, X))))
alpha_new <- as.vector(Ann %*% mu_new / sum(mu_new))
beta_new <- as.vector((1 - Ann) %*% (1 - mu_new) / sum(1 - mu_new))
NR <- NR_algorithm(w_init = w, mu_new, X, gradient, hessian)
w_new <- NR$root
print(NR$iterations)
theta_new <- c(alpha_new, beta_new, w_new)
iter <- iter + 1
print(sqrt(sum((theta_new - theta)^2)))
}
out <- list(alpha = alpha_new, beta = beta_new, w = w_new, pred_ground_truth = as.numeric(mu_new > 0.5))
print(out)
#eyeball misclassification error
sum(data$Diagnosis != out$pred_ground_truth)
source('E:/Studium/09_WS2122/SML_Project/data_screening.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/raykar_binary_classification.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/logistic_regression_binary_classification.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/data_screening.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/raykar_binary_classification.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/data_screening.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/raykar_binary_classification.r', echo=TRUE)
qchisq(0.95,1)
qchisq(0.95,2)
source('E:/Studium/09_WS2122/SML_Project/raykar_binary_classification.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/logistic_regression_binary_classification.r', echo=TRUE)
#fit Raykar and Logistic Regression models with previous routines
source("raykar_binary_classification.r")
#fit Raykar and Logistic Regression models with previous routines
source("raykar_binary_classification.r")
#fit Raykar and Logistic Regression models with previous routines
source("raykar_binary_classification.r")
#fit Raykar and Logistic Regression models with previous routines
source("raykar_binary_classification.r")
#function to evaluate classifier based on different model fitted values
classifier <- function(fitted_vals, thresh = 0.5){
return(as.numeric(fitted_vals > thresh))
}
specificity <- function(classified_vals, ground_truth){
den <- length(ground_truth[ground_truth == 1])
num <- length(classified_vals[(classified_vals == 1) & (ground_truth == 1)])
}
ground_truth <- data_ground_truth$Diagnosis
specificity(ground_truth, ground_truth)
specificity <- function(classified_vals, ground_truth){
den <- length(ground_truth[ground_truth == 1])
num <- length(classified_vals[(classified_vals == 1) & (ground_truth == 1)])
return(num/den)
}
specificity(ground_truth, ground_truth)
sensitivity <- function(classified_vals, ground_truth){
den <- length(ground_truth[ground_truth == 0])
num <- length(classified_vals[(classified_vals == 0) & (ground_truth == 0)])
return(num/den)
}
sensitivity(ground_truth, ground_truth)
#fit Raykar and Logistic Regression models with previous routines
source("raykar_binary_classification.r")
#function to evaluate classifier based on different model fitted values and thresholds
classifier <- function(fitted_vals, thresh = 0.5){
return(as.numeric(fitted_vals > thresh))
}
#functions to calculate specificities/sensitivities
specificity <- function(classified_vals, ground_truth){
den <- length(ground_truth[ground_truth == 1])
num <- length(classified_vals[(classified_vals == 1) & (ground_truth == 1)])
return(num/den)
}
sensitivity <- function(classified_vals, ground_truth){
den <- length(ground_truth[ground_truth == 0])
num <- length(classified_vals[(classified_vals == 0) & (ground_truth == 0)])
return(num/den)
}
ground_truth <- data_ground_truth$Diagnosis
raykar_vals <- classifier(raykar_out$mu)
sensitivity(raykar_vals, ground_truth)
specificity(raykar_vals, ground_truth)
logistic_vals <- classifier(model_majority$fitted.values)
ground_truth <- data_ground_truth$Diagnosis
raykar_vals <- classifier(raykar_out$mu)
logistic_vals <- classifier(model_majority$fitted.values)
sensitivity(raykar_vals, ground_truth)
specificity(raykar_vals, ground_truth)
sensitivity(logistic_vals, ground_truth)
specificity(logistic_vals, ground_truth)
#create ROC-curves
thresh <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
#create ROC-curves
thresh <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
#create ROC-curves
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi)
#create ROC-curves
t <- seq(0,1,0.001)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi)
#create ROC-curves
t <- seq(0,1,0.01)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi)
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves
t <- seq(0,1,0.001)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves
t <- seq(0,1,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves
t <- seq(0,1,0.05)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves for Logistic model
t <- seq(0,1,0.05)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red')
#create ROC-curves for Raykar model
t <- seq(0,1,0.01)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves for Logistic model
t <- seq(0,1,0.01)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red')
#create ROC-curves for Raykar model
t <- seq(0,1,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1))
#create ROC-curves for Logistic model
t <- seq(0,1,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red')
#create ROC-curves for Raykar model
t <- seq(0,1,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue')
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Raykar model
t <- seq(0,0.9,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue')
#create ROC-curves for Raykar model
t <- seq(0.1,0.9,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue')
#create ROC-curves for Raykar model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue')
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Logistic model
t <- seq(0,1,0.1)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red')
#create ROC-curves for Logistic model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
#create ROC-curves for Raykar model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue')
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Logistic model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red')
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red', lty = 3)
#create ROC-curves for Raykar model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue', main = "ROC curve for Raykar (blue) & Logistic regression (red)")
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Logistic model
t <- seq(0,1,0.02)
sensi <- numeric(length(thresh))
speci <- numeric(length(thresh))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red', pch = 4)
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red', lty = 3)
source('E:/Studium/09_WS2122/SML_Project/data_screening.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/performance.r', echo=TRUE)
#create ROC-curves for Raykar model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(thresh)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue', main = "ROC curve for Raykar (blue) & Logistic regression (red)")
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Raykar model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue', main = "ROC curve for Raykar (blue) & Logistic regression (red)")
ground_truth <- data_ground_truth$Diagnosis
#create ROC-curves for Raykar model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), pch = 20, col = 'blue', main = "ROC curve for Raykar (blue) & Logistic regression (red)")
lines(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'blue', lty = 3)
#create ROC-curves for Logistic model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, xlim = c(0,1), ylim = c(0,1), col = 'red', pch = 4)
source('E:/Studium/09_WS2122/SML_Project/performance.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/performance.r', echo=TRUE)
#create ROC-curves for Raykar model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, pch = 20, col = 'blue', asp = 1,
main = "ROC curve for Raykar (blue) & Logistic regression (red)")
#create ROC-curves for Raykar model + plot
par(pty = "s")
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, pch = 20, col = 'blue', asp = 1,
main = "ROC curve for Raykar (blue) & Logistic regression (red)")
lines(1-speci, sensi, col = 'blue', lty = 3)
#create ROC-curves for Logistic model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
#create ROC-curves for Logistic model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, col = 'red', pch = 4)
lines(1-speci, sensi, col = 'red', lty = 3)
#create ROC-curves for Raykar model + plot
par(pty = "s")
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, pch = 20, col = 'blue', asp = 1,
main = "ROC curve for Raykar (blue) & Logistic regression (red)",
xlab = "FPR = 1 - Specificity", ylab = "Sensitivity")
lines(1-speci, sensi, col = 'blue', lty = 3)
#create ROC-curves for Logistic model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, col = 'red', pch = 4)
lines(1-speci, sensi, col = 'red', lty = 3)
source('E:/Studium/09_WS2122/SML_Project/data_screening.r', echo=TRUE)
source('E:/Studium/09_WS2122/SML_Project/performance.r', echo=TRUE)
par(pty = "s")
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(raykar_out$mu, thresh = t[i]), ground_truth)
}
plot(1-speci, sensi, pch = 20, col = 'blue', asp = 1,
main = "ROC curve for Raykar (blue) & Logistic regression with majority voting (red)",
xlab = "FPR = 1 - Specificity", ylab = "Sensitivity")
lines(1-speci, sensi, col = 'blue', lty = 3)
#create ROC-curves for Logistic model + plot
t <- seq(0,1,0.02)
sensi <- numeric(length(t))
speci <- numeric(length(t))
for(i in 1:length(t)){
sensi[i] <- sensitivity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
speci[i] <- specificity(classifier(model_majority$fitted.values, thresh = t[i]), ground_truth)
}
points(1-speci, sensi, col = 'red', pch = 4)
lines(1-speci, sensi, col = 'red', lty = 3)
